function [ fb2d ] = GenAngular_FB_freq2D_gaussian( ker, N )
%GENANGULAR_FB_FREQ2D_GAUSSIAN Generate Angular Filter Bank in freqfilter2d
%The filter bank would match the shape of a gauss kernel generated by, e.g.:
%       ker = fspecial('gaussian', 15, 1.5);
%   Note: 
%       The size (15 here) has to be much larger than the variance sigma
%       (1.5 here), in order to keep the freq shape gaussian. Otherwise,
%       the shape would be much like tensor oscillation, just call
%       GenAngular_FB_freq2D_disk() for angular fb construction, or call
%       GenSquare_FB_freq2D_average() for square fb construction.
%
%
%   Since the frequency response of Gaussian kernel is of gauss shape. We
%   would naturally construct angular frequency fb matching its shape.
%
%Input:
%   ker:
%       blur kernel of gaussian type. 
%   N:
%       freqfilter2d size
%
%   Chenzhe
%   Jun, 2016
%
%


[M1, M2] = size(ker);

if max(M1, M2)<=256
    ker_fullsize = zeros(256);
else
    ker_fullsize = zeros(M1, M2);
end

ker_fullsize(1:M1, 1:M2) = ker;
fker = abs(fft2(ker_fullsize));

fker1d = fker(1,:);
len = floor(length(fker1d)/2);
fker1d = fker1d(1:len);


% Check fker1d to be gaussian shape. If not true, call 
% GenAngular_FB_freq2D_disk() or GenSquare_FB_freq2D_average(). See the
% Note above.
tmp = fker1d(1:end-1) - fker1d(2:end);
if any(tmp<-eps)
    error('The kernel in freq is not in Gaussian shape!');
end

f = 0:len-1;
f = f/len*pi;

fker1dlog = log10(fker1d);
cutoffin = -2;
cutoffout = fker1dlog(end);
L = 5;
cutoff = linspace(cutoffin, cutoffout, L+1);
Rl = zeros(1, L);
for i = 1:L
    tmp = fker1dlog>=cutoff(i);
    Rl(i) = f(sum(tmp));
end


K = 20;

Lv = ceil(log(0.2)/log(Rl(1)/pi));

% fb2d = Angular_FilterBank_freq2D_bump( Rl, K, N );
fb2d = Angular_FilterBank_freq2D( Rl, Lv, K, N );






end

