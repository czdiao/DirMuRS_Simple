%% Filters
% _*Author: Chenzhe Diao*_
% 
% Implementation of Dual Tree filters and help functions to construct
% filters, including 2D filters constructed by tensor product structure.
%


%% Data Structure of filters
% 
% * 1D Filter:
%
%       filter1d.filter   :  array of filter
%       filter1d.start_pt :  filter array starting point
%
% * 2D Filter:
%
%       filter2d.row_filter:    array of row filter
%       filter2d.col_filter:    array of col filter
%       filter2d.row_start_pt:  row filter array starting point
%       filter2d.col_start_pt:  col filter array starting point
% 
% * Filter Bank
%
%     Implemented as an array of filers:  [lowpass, highpass1, highpass2, ...]. 
%     We always put lowpass at the first.
%
%       1x(s+1) struct array with fields:
%
%           filter
%           start_pt
%           
%       1x(s+1) struct array with fields:
%
%           row_filter
%           row_start_pt
%           col_filter
%           col_start_pt

%% 1D Haar Filter
% 
[HaarLow, HaarHigh] = Haar1d

%% CQF
% Generate highpass filter from lowpass filter in CQF pair.
%
% $$b_n = (-1)^{n+1} a_{1-n}$$
% 

HaarHigh = CQF(HaarLow)

%% Convolution of 2 1D filters
%

f = convfilter1d( HaarLow, HaarHigh )

%% 1D Dual Tree Filter Banks
% The Filter Banks given by Selesnick
%
% # FirstStageFilter1d.m
% # FirstStageFilterShift1d.m
% # Tree1Filter1d.m
% # Tree2Filter1d.m
%

%%
% * First Stage Filter Bank for Tree 1:

FS_Filter = FirstStageFilter1d;
lowpass = FS_Filter(1)
highpass = FS_Filter(2)

%%
% * First Stage Filter Bank for Tree 2. The lowpass is a shifted version of Tree
% 1.

FS_Filter2 = FirstStageFilterShift1d;
lowpass = FS_Filter2(1)
highpass = FS_Filter2(2)

%%
% * Later filter bank for Tree 1:

Filter1 = Tree1Filter1d;
lowpass = Filter1(1)
highpass = Filter1(2)

%%
% * Later filter bank for Tree 2:

Filter2 = Tree2Filter1d;
lowpass = Filter2(1)
highpass = Filter2(2)

%% Generate 2D Filter/Filter Bank by Tensor Product
% 
% # FilterTensor.m
% # FilterTensorMultiple.m

%%
% * Generate a 2D filter with 2 1D filters

[RowFilter, ColFilter] = Haar1d;
filter2d = FilterTensor( RowFilter, ColFilter )

%%
% * Generate 2D filter bank with 2 1D filter banks

RowFilterBank = Tree1Filter1d;
ColFilterBank = Tree2Filter1d;
FilterBank2d = FilterTensorMultiple(RowFilterBank, ColFilterBank)

%% 2D Dual Tree Filter Banks
% # DualTreeFilter2d.m
%

[FS_FilterBanks, FilterBanks] = DualTreeFilter2d
FilterBanks{1}{1}   % 2D filter bank (1 lowpass + 3 highpass), use tree 1 filter bank for both rows and columns.

%%
% Both _FS_FilterBanks_ and _FilterBanks_ are 2x2 cells. There is one 2D
% filter bank in each cell. (Each 2D filter bank satisfies PR condition by
% itself.) _FS_FilterBanks_ is for first stage filter banks. _FilterBanks_
% are for later stages.
%
% _FilterBanks{i}{j}_ is the filter bank generated by: using Tree i filter
% bank for rows, Tree j filter bank for columns.

%% 2D Dual Tree Split Highpass Filter Banks
% # DualTreeFilter2d_SplitHipass.m
%
% The same as DualTreeFilter2d.m above, for multiple hipass filters in each tree.
%

[FS_FilterBanks, FilterBanks] = DualTreeFilter2d_SplitHipass
















